{"version":3,"sources":["assets/images/listener-one.svg","assets/images/stop.svg","assets/images/microphone.svg","app/components/pages/exercise/listener/listener.component.tsx","app/components/pages/exercise/sentence/sentence.component.tsx","app/components/pages/exercise/actions/actions.component.tsx","app/components/services/speech-recognition-web-api.component.tsx","app/components/services/wiktionary.tsx","app/components/pages/exercise/exercise.page.tsx","app/App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Listener","props","className","src","require","alt","speechListenerStatus","value","console","log","message","chatBubble","Sentence","sentenceInfo","results","setWordSelected","wordSelected","phoneticValue","map","wordInfo","index","key","word","onClick","result","useKey","getResultButton","Actions","record","stop","isRecording","SpeechRecognitionWebApi","recognition","forceStop","SpeechRecognition","window","speechRecognition","webkitSpeechRecognition","this","builder","Promise","resolve","reject","lang","interimResults","maxAlternatives","continuous","speechResult","start","onaudiostart","event","error","abort","onresult","length","transcript","toLowerCase","confidente","confidence","push","trim","split","join","onspeechend","onerror","onaudioend","onend","startSpeechToText","onnomatch","onsoundstart","onsoundend","onspeechstart","onstart","parseHTML","html","DOMParser","parseFromString","querySelector","textContent","getPronunciation","a","fetch","then","response","text","pronunciation","String","catch","Exercise","speechToText","sentenceText","startSpeech","state","setState","setResult","stopSpeech","stopSpeechToText","getSpeech","finalSpeech","Math","random","shift","forEach","element","countCorrectResults","setSentenceInfo","words","React","Component","App","serverSpeechValidation","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b433b28a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/listener-one.2c38ffbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop.6af5a914.svg\";","module.exports = __webpack_public_path__ + \"static/media/microphone.28cb80de.svg\";","import React from 'react';\nimport './listener.component.css';\n\nexport default function Listener(props: any) {\n\n  const chatBubble = (value: any) => {\n\n    console.log(value.speechListenerStatus);\n\n    let message = <div className=\"bubble\">\n                    <p>That's it!</p>\n                    <p>Good job!</p>\n                  </div>\n\n    if (value === \"correct\") {\n      message =  <div className=\"bubble\">\n                    <p>Nice!</p>\n                  </div>\n    }\n\n    if (value === \"incorrect\") {\n      message =  <div className=\"bubble\">\n                    <p>Try again!</p>\n                  </div>\n    }\n\n    return message\n  }\n\n  return (\n      <section className=\"listener-area\">\n        <div className=\"listener-wrapper\">\n        <img \n          src={require('../../../../../assets/images/listener-one.svg')}\n          alt=\"Listener Default Expression\">\n        </img>\n\n        { props.speechListenerStatus ? chatBubble(props.speechListenerStatus) : \"\" }\n        </div>\n      </section>\n  );\n}\n","import React from 'react';\nimport './sentence.component.css';\n\ntype WordInfo = {\n  word: string,\n  phoneticValue: string\n}\n\ntype Result = {\n  value: boolean,\n  key: string\n}\n\ntype SentenceProps = {\n  sentenceInfo: WordInfo[],\n  results: Result[],\n  useKey: boolean,\n  speechListenerStatus: string,\n  setWordSelected: (wordSelected: WordInfo) => void,\n  wordSelected: WordInfo\n}\n\nexport default function Sentence(props: SentenceProps) {\n\n  const sentenceInfo = props.sentenceInfo;\n  const results = props.results;\n  const setWordSelected = props.setWordSelected;\n  const wordSelected = props.wordSelected;\n  \n  const phoneticArea = () => {\n\n    if (wordSelected.phoneticValue) {\n      return <span>{wordSelected.phoneticValue}</span>;\n    }\n    return <span className=\"unselected\"> Tap the word for more info </span>;\n  }\n\n  const getResultButton = (result: Result, index: number) => {\n\n    let className = \"slide \";\n\n    if (result.value) {\n      className += \"correct \";\n    }\n    else {\n      className += \"incorrect \";\n    }\n\n    if (props.speechListenerStatus === \"all-correct\") {\n      className += \"all-correct\";\n    }\n\n    return <span key={ props.useKey ? result.key : index} className={className}></span>;\n  }\n\n  return (\n      <section className=\"sentence-area\">\n        <div className=\"phonetic-area\">{phoneticArea()}</div>\n        <div className=\"sentence-to-speech\">\n          {sentenceInfo.map((wordInfo, index) => {\n            return <span key={index} className={(wordSelected.word === wordInfo.word) ? \"word selected\" : \"word\"} onClick={() => setWordSelected(wordInfo)}>\n                      {wordInfo.word}\n                    </span>;\n          })}\n        </div>\n        <div className=\"result-area\">\n          {results.map((result, index) => {\n            return getResultButton(result, index);\n          })}\n        </div>\n      </section>\n  );\n}\n","import React from 'react';\nimport './actions.component.css';\n\nexport default function Actions(props: any) {\n\n  const record = props.record;\n  const stop = props.stop;\n  const isRecording = props.isRecording;\n\n  const getButton = () => {\n    if (isRecording) {\n      return <button className=\"stop\" onClick={stop}>\n        <img\n          src={require('../../../../../assets/images/stop.svg')}\n          alt=\"Stop recording\">\n        </img>\n      </button>\n    }\n    else {\n      return <button className=\"talk\" onClick={record}>\n        <img\n          src={require('../../../../../assets/images/microphone.svg')}\n          alt=\"Start recording\">\n        </img>\n      </button>\n    }\n  }\n\n  return (\n      <section className=\"actions-area\">\n        {/* <button className=\"arrow left\">\n          <img\n            src={require('../../../../../assets/images/arrow.svg')}\n            alt=\"Previous Exercise\">\n          </img>\n        </button> */}\n\n        <div className=\"center-actions\">\n          {/* <button className=\"listen\">\n            <img\n              src={require('../../../../../assets/images/listening.svg')}\n              alt=\"Listen to example\">\n            </img>\n          </button> */}\n          {getButton()}\n        </div>\n\n        {/* <button className=\"arrow right\">\n          <img\n            src={require('../../../../../assets/images/arrow.svg')}\n            alt=\"Next Exercise\">\n          </img>\n        </button> */}\n      </section>\n  );\n}\n","import SpeechToText from '../../../interfaces/speech-to-text';\n\nexport default class SpeechRecognitionWebApi implements SpeechToText {\n  recognition: any;\n  forceStop = false;\n\n  constructor() {\n    // @ts-ignore\n    const SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n    this.recognition = new SpeechRecognition() ;\n    this.builder();\n    }\n  }\n\n  startSpeechToText(): Promise<boolean>{\n    const promise: Promise<boolean> = new Promise((resolve, reject) => {\n\n      try {\n        this.recognition.lang = \"en-US\";\n        this.recognition.interimResults = false;\n        this.recognition.maxAlternatives = 1;\n        this.recognition.continuous = true;\n        this.recognition.speechResult = [];\n        this.recognition.start();\n\n        this.recognition.onaudiostart = (event: any) => {\n          resolve(true);\n        };\n      }\n      catch (error) {\n        console.log(error);\n        reject(false);\n      }\n    });\n\n    return promise;\n  }\n\n  stopSpeechToText() {\n    this.forceStop = true;\n    this.recognition.abort();\n  }\n\n  getSpeech() {\n    const promise:Promise<string> = new Promise(resolve => {\n      this.recognition.onresult = function (event: any) {\n      \n        const speechResult = event.results[event.results.length -1][0].transcript.toLowerCase();\n        const confidente = event.results[event.results.length -1][0].confidence\n        this.speechResult.push(...speechResult.trim().split(\" \"));\n        console.log(this.speechResult);\n  \n        console.log(\"Confidence: \" + confidente);\n\n        resolve(this.speechResult.join(\" \"));\n        this.speechResult = [];\n      };\n    })\n\n    return promise;\n  }\n\n  builder() {\n\n    this.recognition.onspeechend = () => {\n      this.recognition.stop();\n    };\n\n    this.recognition.onerror = (event: any) => {\n      console.log(\"Error occurred in recognition:\");\n      console.log(event); //event.error\n    };\n\n    this.recognition.onaudioend = (event: any) => {\n      //Fired when the user agent has finished capturing audio.\n      console.log(\"SpeechRecognition.onaudioend\");\n    };\n\n    this.recognition.onend = (event: any) => {\n      //Fired when the speech recognition service has disconnected.\n      console.log(\"SpeechRecognition.onend\");\n      if (this.forceStop) {\n        this.forceStop = false;\n      }\n      else {\n        this.startSpeechToText();\n        console.log(\"Starting again\");\n      }\n    };\n\n    this.recognition.onnomatch = (event: any) => {\n      //Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold.\n      console.log(\"SpeechRecognition.onnomatch\");\n    };\n\n    this.recognition.onsoundstart = (event: any) => {\n      //Fired when any sound — recognisable speech or not — has been detected.\n      console.log(\"SpeechRecognition.onsoundstart\");\n    };\n\n    this.recognition.onsoundend = (event: any) => {\n      //Fired when any sound — recognisable speech or not — has stopped being detected.\n      console.log(\"SpeechRecognition.onsoundend\");\n    };\n\n    this.recognition.onspeechstart = (event: any) => {\n      //Fired when sound that is recognised by the speech recognition service as speech has been detected.\n      console.log(\"SpeechRecognition.onspeechstart\");\n    };\n\n    this.recognition.onstart = (event: any) => {\n      //Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.\n      console.log(\"SpeechRecognition.onstart\");\n    };\n  }\n}\n","const endpoint = \"https://en.wiktionary.org/api/rest_v1/page/html/\";\n\nconst parseHTML = (html:string) => {\n  const parser = new DOMParser();\n  const htmlDoc = parser.parseFromString(html, 'text/html');\n  const pronunciation = htmlDoc.querySelector(\".IPA\")?.textContent;\n  return pronunciation;\n}\n\nexport const getPronunciation = async (word:string) => {\n\n  const pronunciation = await fetch(endpoint+word)\n  .then(response => response.text())\n  .then(html => parseHTML(html))\n  .then(pronunciation => String(pronunciation))\n  .catch(error => {console.error(error); return \"\"}\n  );\n\n  return pronunciation;\n}\n","import React from 'react';\nimport './exercise.page.css';\n\nimport SpeechToText from '../../../../interfaces/speech-to-text';\nimport Listener from './listener/listener.component';\nimport Sentence from './sentence/sentence.component';\nimport Actions from './actions/actions.component';\nimport SpeechRecognitionWebApi from '../../services/speech-recognition-web-api.component';\nimport { getPronunciation } from '../../services/wiktionary';\n\ntype ExerciseProps = {\n  serverSpeechValidation: boolean;\n}\n\ntype ExerciseState = {\n  result: Result[],\n  useKey: boolean,\n  speechToText: SpeechToText,\n  isRecording: Boolean,\n  sentenceInfo: WordInfo[],\n  wordSelected: WordInfo,\n  speechListenerStatus: string\n}\n\ntype WordInfo = {\n  word: string,\n  phoneticValue: string\n}\n\ntype Result = {\n  value: boolean,\n  key: string\n}\n\nclass Exercise extends React.Component<ExerciseProps, ExerciseState> {\n\n  constructor(props: ExerciseProps) {\n    super(props);\n\n    let speechToText;\n    speechToText = new SpeechRecognitionWebApi();\n\n    this.state = {\n      result: [],\n      useKey: false,\n      speechToText: speechToText,\n      isRecording: false,\n      sentenceInfo: [{word: \"loading...\", phoneticValue: \"\"}],\n      wordSelected: {word: \"\", phoneticValue: \"\"},\n      speechListenerStatus: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setSentenceInfo();\n  }\n\n  private sentenceText = \"Nice to meet you\";\n\n  startSpeech = async () => {\n    const speechToText = this.state.speechToText;\n    const recordingStarted = await speechToText.startSpeechToText();\n\n    if (recordingStarted) {\n      const isRecording = true;\n      this.setState({ isRecording });\n    }\n\n    this.setResult();\n  }\n\n  stopSpeech = () => {\n    const speechToText = this.state.speechToText;\n    speechToText.stopSpeechToText();\n\n    const isRecording = false;\n    this.setState({ isRecording });\n    this.setResult();\n\n  }\n\n  setResult = async () => {\n    const speechToText = this.state.speechToText;\n    const finalSpeech = await speechToText.getSpeech();\n\n    console.log(\n      \"Final Speech: %c\" + finalSpeech,\n      \"font-family:system-ui;font-size:1rem;font-weight:bold\"\n    );\n\n    const expectedSentence = \"Nice to meet you\";\n    const value = (finalSpeech.toLowerCase() === expectedSentence.toLowerCase() );\n\n    let result = this.state.result;\n    result.push({value, key: String(Math.random())});\n    if (result.length > 3) {\n      const useKey = true;\n      this.setState({ useKey });\n      result.shift();\n      result.forEach(element => {\n        element.key = String(Math.random());\n      });\n    }\n\n    this.setState({ result });\n\n    let speechListenerStatus = value ? \"correct\" : \"incorrect\";\n\n    if (this.state.result.length === 3) {\n      let countCorrectResults = 0;\n      for (const element of this.state.result) {\n        if (element.value) {\n          countCorrectResults++;\n        }\n      }\n\n      if (countCorrectResults === 3) {\n        console.log(\"Done\");\n        this.stopSpeech();\n\n        speechListenerStatus = \"all-correct\";\n      }\n    }\n\n    this.setState({ speechListenerStatus });\n\n    if (this.state.isRecording) {\n      this.setResult();\n    }\n  }\n\n  setSentenceInfo = async () => {\n    const sentenceText = this.sentenceText;\n    const words = sentenceText.split(\" \");\n    let sentenceInfo: WordInfo[] = [];\n\n    for (const word of words) {\n      const phoneticValue = await getPronunciation(word);\n      sentenceInfo.push({word, phoneticValue});\n    }\n\n    this.setState({ sentenceInfo });\n  }\n\n  setWordSelected = (wordSelected: WordInfo) => {\n\n    if (wordSelected.word === this.state.wordSelected.word) {\n      wordSelected = {word: \"\", phoneticValue: \"\"};\n    }\n    this.setState({ wordSelected });\n  }\n\n  getSpeechBubbleinfo() {\n\n\n\n  }\n\n  render() {\n    return (\n    <div className=\"exercise-wrapper\">\n      <Listener speechListenerStatus={this.state.speechListenerStatus}></Listener>\n      <Sentence sentenceInfo={this.state.sentenceInfo} results={this.state.result} useKey={this.state.useKey} speechListenerStatus={this.state.speechListenerStatus} setWordSelected={this.setWordSelected} wordSelected={this.state.wordSelected}/>\n      <Actions record={this.startSpeech} stop={this.stopSpeech} isRecording={this.state.isRecording}/>\n    </div>);\n  }\n}\n\nexport default Exercise;\n","import React from 'react';\nimport './App.css';\nimport Exercise from './components/pages/exercise/exercise.page'\n\nfunction App() {\n  return (\n    <Exercise serverSpeechValidation={false}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}